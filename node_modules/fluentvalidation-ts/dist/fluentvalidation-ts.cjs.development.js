'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var hasError = function hasError(valueValidationResult) {
  if (valueValidationResult == null) {
    return false;
  }

  if (Array.isArray(valueValidationResult)) {
    return valueValidationResult.filter(function (eachResult) {
      return hasError(eachResult);
    }).length > 0;
  }

  if (typeof valueValidationResult === 'object') {
    return Object.keys(valueValidationResult).length > 0;
  }

  return valueValidationResult != null;
};

var CoreRule = function CoreRule() {
  var _this = this;

  this.setCustomErrorMessage = function (customErrorMessage) {
    _this.customErrorMessage = customErrorMessage;
  };

  this.setWhenCondition = function (condition) {
    _this.whenCondition = condition;
  };

  this.setUnlessCondition = function (condition) {
    _this.unlessCondition = condition;
  };
};

var AsyncRule = /*#__PURE__*/function (_CoreRule) {
  _inheritsLoose(AsyncRule, _CoreRule);

  function AsyncRule(asyncValueValidator) {
    var _this;

    _this = _CoreRule.call(this) || this;

    _this.validateAsync = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(value, model) {
        var errorOrNull;
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(_this.whenCondition != null && !_this.whenCondition(model))) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", null);

              case 2:
                if (!(_this.unlessCondition != null && _this.unlessCondition(model))) {
                  _context.next = 4;
                  break;
                }

                return _context.abrupt("return", null);

              case 4:
                _context.next = 6;
                return _this.asyncValueValidator(value, model);

              case 6:
                errorOrNull = _context.sent;
                return _context.abrupt("return", errorOrNull != null ? _this.customErrorMessage || errorOrNull : null);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();

    _this.asyncValueValidator = asyncValueValidator;
    return _this;
  }

  return AsyncRule;
}(CoreRule);

var MustAsyncRule = /*#__PURE__*/function (_AsyncRule) {
  _inheritsLoose(MustAsyncRule, _AsyncRule);

  function MustAsyncRule(definition) {
    return _AsyncRule.call(this, /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(value, model) {
        var _iterator, _step, eachDefinition, isValid, _isValid, predicate, message;

        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!Array.isArray(definition)) {
                  _context.next = 20;
                  break;
                }

                _iterator = _createForOfIteratorHelperLoose(definition);

              case 2:
                if ((_step = _iterator()).done) {
                  _context.next = 19;
                  break;
                }

                eachDefinition = _step.value;

                if (!(typeof eachDefinition === 'function')) {
                  _context.next = 12;
                  break;
                }

                _context.next = 7;
                return eachDefinition(value, model);

              case 7:
                isValid = _context.sent;

                if (isValid) {
                  _context.next = 10;
                  break;
                }

                return _context.abrupt("return", 'Value is not valid');

              case 10:
                _context.next = 17;
                break;

              case 12:
                _context.next = 14;
                return eachDefinition.predicate(value, model);

              case 14:
                _isValid = _context.sent;

                if (_isValid) {
                  _context.next = 17;
                  break;
                }

                return _context.abrupt("return", typeof eachDefinition.message === 'function' ? eachDefinition.message(value, model) : eachDefinition.message);

              case 17:
                _context.next = 2;
                break;

              case 19:
                return _context.abrupt("return", null);

              case 20:
                if (!(typeof definition === 'function')) {
                  _context.next = 29;
                  break;
                }

                _context.next = 23;
                return definition(value, model);

              case 23:
                if (!_context.sent) {
                  _context.next = 27;
                  break;
                }

                _context.t0 = null;
                _context.next = 28;
                break;

              case 27:
                _context.t0 = 'Value is not valid';

              case 28:
                return _context.abrupt("return", _context.t0);

              case 29:
                predicate = definition.predicate, message = definition.message;
                _context.next = 32;
                return predicate(value, model);

              case 32:
                if (!_context.sent) {
                  _context.next = 36;
                  break;
                }

                _context.t1 = null;
                _context.next = 37;
                break;

              case 36:
                _context.t1 = typeof message === 'function' ? message(value, model) : message;

              case 37:
                return _context.abrupt("return", _context.t1);

              case 38:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }()) || this;
  }

  return MustAsyncRule;
}(AsyncRule);

var AsyncValidatorRule = /*#__PURE__*/function (_AsyncRule) {
  _inheritsLoose(AsyncValidatorRule, _AsyncRule);

  function AsyncValidatorRule(validatorProducer) {
    return _AsyncRule.call(this, /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(value, model) {
        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(value == null)) {
                  _context.next = 4;
                  break;
                }

                _context.t0 = Promise.resolve(null);
                _context.next = 7;
                break;

              case 4:
                _context.next = 6;
                return validatorProducer(model).validateAsync(value);

              case 6:
                _context.t0 = _context.sent;

              case 7:
                return _context.abrupt("return", _context.t0);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }()) || this;
  }

  return AsyncValidatorRule;
}(AsyncRule);

var Rule = /*#__PURE__*/function (_CoreRule) {
  _inheritsLoose(Rule, _CoreRule);

  function Rule(valueValidator) {
    var _this;

    _this = _CoreRule.call(this) || this;

    _this.validate = function (value, model) {
      if (_this.whenCondition != null && !_this.whenCondition(model)) {
        return null;
      }

      if (_this.unlessCondition != null && _this.unlessCondition(model)) {
        return null;
      }

      var errorOrNull = _this.valueValidator(value, model);

      return errorOrNull != null ? _this.customErrorMessage || errorOrNull : null;
    };

    _this.valueValidator = valueValidator;
    return _this;
  }

  return Rule;
}(CoreRule);

var emailAddressPattern = /^[a-zA-Z0-9.!#$%&’"*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)+$/;
var EmailAddressRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(EmailAddressRule, _Rule);

  function EmailAddressRule() {
    return _Rule.call(this, function (value) {
      if (value == null) {
        return null;
      }

      if (typeof value !== 'string') {
        throw new TypeError('A non-string value was passed to the emailAddress rule');
      }

      return emailAddressPattern.test(value) ? null : 'Not a valid email address';
    }) || this;
  }

  return EmailAddressRule;
}(Rule);

var EqualRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(EqualRule, _Rule);

  function EqualRule(requiredValue) {
    return _Rule.call(this, function (value) {
      return value === requiredValue ? null : "Must equal '" + requiredValue + "'";
    }) || this;
  }

  return EqualRule;
}(Rule);

var ExclusiveBetweenRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(ExclusiveBetweenRule, _Rule);

  function ExclusiveBetweenRule(lowerBound, upperBound) {
    return _Rule.call(this, function (value) {
      if (value == null) {
        return null;
      }

      if (typeof value !== 'number') {
        throw new TypeError('A non-number value was passed to the exclusiveBetween rule');
      }

      return value > lowerBound && value < upperBound ? null : "Value must be between " + lowerBound.toLocaleString() + " and " + upperBound.toLocaleString() + " (exclusive)";
    }) || this;
  }

  return ExclusiveBetweenRule;
}(Rule);

var GreaterThanOrEqualToRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(GreaterThanOrEqualToRule, _Rule);

  function GreaterThanOrEqualToRule(threshold) {
    return _Rule.call(this, function (value) {
      if (value == null) {
        return null;
      }

      if (typeof value !== 'number') {
        throw new TypeError('A non-number value was passed to the greaterThanOrEqualTo rule');
      }

      return value >= threshold ? null : "Value must be greater than or equal to " + threshold.toLocaleString();
    }) || this;
  }

  return GreaterThanOrEqualToRule;
}(Rule);

var GreaterThanRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(GreaterThanRule, _Rule);

  function GreaterThanRule(threshold) {
    return _Rule.call(this, function (value) {
      if (value == null) {
        return null;
      }

      if (typeof value !== 'number') {
        throw new TypeError('A non-number value was passed to the greaterThan rule');
      }

      return value > threshold ? null : "Value must be greater than " + threshold.toLocaleString();
    }) || this;
  }

  return GreaterThanRule;
}(Rule);

var InclusiveBetweenRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(InclusiveBetweenRule, _Rule);

  function InclusiveBetweenRule(lowerBound, upperBound) {
    return _Rule.call(this, function (value) {
      if (value == null) {
        return null;
      }

      if (typeof value !== 'number') {
        throw new TypeError('A non-number value was passed to the inclusiveBetween rule');
      }

      return value >= lowerBound && value <= upperBound ? null : "Value must be between " + lowerBound.toLocaleString() + " and " + upperBound.toLocaleString() + " (inclusive)";
    }) || this;
  }

  return InclusiveBetweenRule;
}(Rule);

var LengthRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(LengthRule, _Rule);

  function LengthRule(minLength, maxLength) {
    return _Rule.call(this, function (value) {
      if (value == null) {
        return null;
      }

      if (typeof value !== 'string') {
        throw new TypeError('A non-string value was passed to the length rule');
      }

      return value.length >= minLength && value.length <= maxLength ? null : "Value must be between " + minLength.toLocaleString() + " and " + maxLength.toLocaleString() + " characters long";
    }) || this;
  }

  return LengthRule;
}(Rule);

var LessThanOrEqualToRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(LessThanOrEqualToRule, _Rule);

  function LessThanOrEqualToRule(threshold) {
    return _Rule.call(this, function (value) {
      if (value == null) {
        return null;
      }

      if (typeof value !== 'number') {
        throw new TypeError('A non-number value was passed to the lessThanOrEqualTo rule');
      }

      return value <= threshold ? null : "Value must be less than or equal to " + threshold.toLocaleString();
    }) || this;
  }

  return LessThanOrEqualToRule;
}(Rule);

var LessThanRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(LessThanRule, _Rule);

  function LessThanRule(threshold) {
    return _Rule.call(this, function (value) {
      if (value == null) {
        return null;
      }

      if (typeof value !== 'number') {
        throw new TypeError('A non-number value was passed to the lessThan rule');
      }

      return value < threshold ? null : "Value must be less than " + threshold.toLocaleString();
    }) || this;
  }

  return LessThanRule;
}(Rule);

var MatchesRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(MatchesRule, _Rule);

  function MatchesRule(pattern) {
    return _Rule.call(this, function (value) {
      if (value == null) {
        return null;
      }

      if (typeof value !== 'string') {
        throw new TypeError('A non-string value was passed to the matches rule');
      }

      return pattern.test(value) ? null : 'Value does not match the required pattern';
    }) || this;
  }

  return MatchesRule;
}(Rule);

var MaxLengthRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(MaxLengthRule, _Rule);

  function MaxLengthRule(maxLength) {
    return _Rule.call(this, function (value) {
      if (value == null) {
        return null;
      }

      if (typeof value !== 'string') {
        throw new TypeError('A non-string value was passed to the maxLength rule');
      }

      return value.length <= maxLength ? null : "Value must be no more than " + maxLength.toLocaleString() + " characters long";
    }) || this;
  }

  return MaxLengthRule;
}(Rule);

var MinLengthRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(MinLengthRule, _Rule);

  function MinLengthRule(minLength) {
    return _Rule.call(this, function (value) {
      if (value == null) {
        return null;
      }

      if (typeof value !== 'string') {
        throw new TypeError('A non-string value was passed to the minLength rule');
      }

      return value.length >= minLength ? null : "Value must be at least " + minLength.toLocaleString() + " characters long";
    }) || this;
  }

  return MinLengthRule;
}(Rule);

var MustRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(MustRule, _Rule);

  function MustRule(definition) {
    return _Rule.call(this, function (value, model) {
      if (Array.isArray(definition)) {
        for (var _iterator = _createForOfIteratorHelperLoose(definition), _step; !(_step = _iterator()).done;) {
          var eachDefinition = _step.value;

          if (typeof eachDefinition === 'function') {
            var isValid = eachDefinition(value, model);

            if (!isValid) {
              return 'Value is not valid';
            }
          } else {
            var _isValid = eachDefinition.predicate(value, model);

            if (!_isValid) {
              return typeof eachDefinition.message === 'function' ? eachDefinition.message(value, model) : eachDefinition.message;
            }
          }
        }

        return null;
      }

      if (typeof definition === 'function') {
        return definition(value, model) ? null : 'Value is not valid';
      }

      var predicate = definition.predicate,
          message = definition.message;
      return predicate(value, model) ? null : typeof message === 'function' ? message(value, model) : message;
    }) || this;
  }

  return MustRule;
}(Rule);

var NotEmptyRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(NotEmptyRule, _Rule);

  function NotEmptyRule() {
    return _Rule.call(this, function (value) {
      if (typeof value !== 'string') {
        if (value == null) {
          return null;
        }

        throw new TypeError('A non-string value was passed to the notEmpty rule');
      }

      return value.trim().length > 0 ? null : 'Value cannot be empty';
    }) || this;
  }

  return NotEmptyRule;
}(Rule);

var NotEqualRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(NotEqualRule, _Rule);

  function NotEqualRule(forbiddenValue) {
    return _Rule.call(this, function (value) {
      return value !== forbiddenValue ? null : "Must not equal '" + forbiddenValue + "'";
    }) || this;
  }

  return NotEqualRule;
}(Rule);

var NotNullRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(NotNullRule, _Rule);

  function NotNullRule() {
    return _Rule.call(this, function (value) {
      return value != null ? null : 'Value cannot be null';
    }) || this;
  }

  return NotNullRule;
}(Rule);

var NullRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(NullRule, _Rule);

  function NullRule() {
    return _Rule.call(this, function (value) {
      return value == null ? null : 'Value must be null';
    }) || this;
  }

  return NullRule;
}(Rule);

var ScalePrecisionRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(ScalePrecisionRule, _Rule);

  function ScalePrecisionRule(precision, scale) {
    return _Rule.call(this, function (value) {
      if (value == null) {
        return null;
      }

      if (typeof value !== 'number') {
        throw new TypeError('A non-number value was passed to the scalePrecision rule');
      }

      var regex = scalePrecisionRegex(scale, precision);

      if (!regex.test(value.toString())) {
        return "Value must not be more than " + scale + " digits in total, with allowance for " + precision + " decimals";
      }

      return null;
    }) || this;
  }

  return ScalePrecisionRule;
}(Rule);

var scalePrecisionRegex = function scalePrecisionRegex(scale, precision) {
  return new RegExp("^(-)?([0-9]){0," + (scale - precision) + "}(\\.[0-9]{0," + precision + "})?$");
};

var ValidatorRule = /*#__PURE__*/function (_Rule) {
  _inheritsLoose(ValidatorRule, _Rule);

  function ValidatorRule(validatorProducer) {
    return _Rule.call(this, function (value, model) {
      return value == null ? null : validatorProducer(model).validate(value);
    }) || this;
  }

  return ValidatorRule;
}(Rule);

var CoreValueValidatorBuilder = function CoreValueValidatorBuilder(rebuildValidate) {
  var _this = this;

  this.rules = [];

  this.pushRule = function (rule) {
    _this.rules.push({
      isAsync: false,
      rule: rule
    });

    _this.rebuildValidate();
  };

  this.pushAsyncRule = function (rule) {
    _this.rules.push({
      isAsync: true,
      rule: rule
    });

    _this.rebuildValidate();
  };

  this.withMessage = function (message) {
    var latestRule = _this.getLatestRule();

    latestRule.rule.setCustomErrorMessage(message);

    _this.rebuildValidate();

    return _extends({}, _this.getAllRules(), {
      when: _this.when,
      unless: _this.unless
    });
  };

  this.when = function (condition, appliesTo) {
    if (appliesTo === void 0) {
      appliesTo = 'AppliesToAllValidators';
    }

    if (appliesTo === 'AppliesToAllValidators') {
      for (var _iterator = _createForOfIteratorHelperLoose(_this.rules), _step; !(_step = _iterator()).done;) {
        var rule = _step.value;
        rule.rule.setWhenCondition(condition);
      }
    } else {
      var latestRule = _this.getLatestRule();

      latestRule.rule.setWhenCondition(condition);
    }

    _this.rebuildValidate();

    return _this.getAllRules();
  };

  this.unless = function (condition, appliesTo) {
    if (appliesTo === void 0) {
      appliesTo = 'AppliesToAllValidators';
    }

    if (appliesTo === 'AppliesToAllValidators') {
      for (var _iterator2 = _createForOfIteratorHelperLoose(_this.rules), _step2; !(_step2 = _iterator2()).done;) {
        var rule = _step2.value;
        rule.rule.setUnlessCondition(condition);
      }
    } else {
      var latestRule = _this.getLatestRule();

      latestRule.rule.setUnlessCondition(condition);
    }

    _this.rebuildValidate();

    return _this.getAllRules();
  };

  this.notEqual = function (forbiddenValue) {
    var notEqualRule = new NotEqualRule(forbiddenValue);

    _this.pushRule(notEqualRule);

    return _this.getAllRulesAndExtensions();
  };

  this.equal = function (requiredValue) {
    var equalRule = new EqualRule(requiredValue);

    _this.pushRule(equalRule);

    return _this.getAllRulesAndExtensions();
  };

  this.must = function (definition) {
    var mustRule = new MustRule(definition);

    _this.pushRule(mustRule);

    return _this.getAllRulesAndExtensions();
  };

  this.notNull = function () {
    var notNullRule = new NotNullRule();

    _this.pushRule(notNullRule);

    return _this.getAllRulesAndExtensions();
  };

  this["null"] = function () {
    var nullRule = new NullRule();

    _this.pushRule(nullRule);

    return _this.getAllRulesAndExtensions();
  };

  this.notEmpty = function () {
    var notEmptyRule = new NotEmptyRule();

    _this.pushRule(notEmptyRule);

    return _this.getAllRulesAndExtensions();
  };

  this.length = function (minLength, maxLength) {
    var lengthRule = new LengthRule(minLength, maxLength);

    _this.pushRule(lengthRule);

    return _this.getAllRulesAndExtensions();
  };

  this.maxLength = function (maxLength) {
    var maxLengthRule = new MaxLengthRule(maxLength);

    _this.pushRule(maxLengthRule);

    return _this.getAllRulesAndExtensions();
  };

  this.minLength = function (minLength) {
    var minLengthRule = new MinLengthRule(minLength);

    _this.pushRule(minLengthRule);

    return _this.getAllRulesAndExtensions();
  };

  this.matches = function (pattern) {
    var matchesRule = new MatchesRule(pattern);

    _this.pushRule(matchesRule);

    return _this.getAllRulesAndExtensions();
  };

  this.emailAddress = function () {
    var emailAddressRule = new EmailAddressRule();

    _this.pushRule(emailAddressRule);

    return _this.getAllRulesAndExtensions();
  };

  this.lessThan = function (threshold) {
    var lessThanRule = new LessThanRule(threshold);

    _this.pushRule(lessThanRule);

    return _this.getAllRulesAndExtensions();
  };

  this.lessThanOrEqualTo = function (threshold) {
    var lessThanOrEqualToRule = new LessThanOrEqualToRule(threshold);

    _this.pushRule(lessThanOrEqualToRule);

    return _this.getAllRulesAndExtensions();
  };

  this.greaterThan = function (threshold) {
    var greaterThanRule = new GreaterThanRule(threshold);

    _this.pushRule(greaterThanRule);

    return _this.getAllRulesAndExtensions();
  };

  this.greaterThanOrEqualTo = function (threshold) {
    var greaterThanOrEqualToRule = new GreaterThanOrEqualToRule(threshold);

    _this.pushRule(greaterThanOrEqualToRule);

    return _this.getAllRulesAndExtensions();
  };

  this.exclusiveBetween = function (lowerBound, upperBound) {
    var exclusiveBetweenRule = new ExclusiveBetweenRule(lowerBound, upperBound);

    _this.pushRule(exclusiveBetweenRule);

    return _this.getAllRulesAndExtensions();
  };

  this.inclusiveBetween = function (lowerBound, upperBound) {
    var inclusiveBetweenRule = new InclusiveBetweenRule(lowerBound, upperBound);

    _this.pushRule(inclusiveBetweenRule);

    return _this.getAllRulesAndExtensions();
  };

  this.setValidator = function (validatorProducer) {
    var validatorRule = new ValidatorRule(validatorProducer);

    _this.pushRule(validatorRule);

    return _this.getAllRulesAndExtensions();
  };

  this.scalePrecision = function (precision, scale) {
    if (scale - precision <= 0) {
      throw new Error('Invalid scale and precision were passed to the scalePrecision rule');
    }

    var scalePrecisionRule = new ScalePrecisionRule(precision, scale);

    _this.pushRule(scalePrecisionRule);

    return _this.getAllRulesAndExtensions();
  };

  this._getAllRules = function () {
    return {
      notEqual: _this.notEqual,
      equal: _this.equal,
      must: _this.must,
      notNull: _this.notNull,
      "null": _this["null"],
      notEmpty: _this.notEmpty,
      length: _this.length,
      maxLength: _this.maxLength,
      minLength: _this.minLength,
      matches: _this.matches,
      emailAddress: _this.emailAddress,
      lessThan: _this.lessThan,
      lessThanOrEqualTo: _this.lessThanOrEqualTo,
      greaterThan: _this.greaterThan,
      greaterThanOrEqualTo: _this.greaterThanOrEqualTo,
      exclusiveBetween: _this.exclusiveBetween,
      inclusiveBetween: _this.inclusiveBetween,
      setValidator: _this.setValidator,
      scalePrecision: _this.scalePrecision
    };
  }; // We don't care about code coverage for this line
  // istanbul ignore next


  this.getAllRules = function () {
    throw new Error('getAllRules on CoreValueValidatorBuilder is an abstract method and should never be called');
  };

  this.getAllRulesAndExtensions = function () {
    return _extends({}, _this.getAllRules(), {
      withMessage: _this.withMessage,
      when: _this.when,
      unless: _this.unless
    });
  };

  this.getLatestRule = function () {
    return _this.rules[_this.rules.length - 1];
  };

  this.rebuildValidate = rebuildValidate;
};

var AsyncValueValidatorBuilder = /*#__PURE__*/function (_CoreValueValidatorBu) {
  _inheritsLoose(AsyncValueValidatorBuilder, _CoreValueValidatorBu);

  function AsyncValueValidatorBuilder(rebuildValidateAsync) {
    var _this;

    _this = _CoreValueValidatorBu.call(this, rebuildValidateAsync) || this;

    _this.build = function () {
      return /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(value, model) {
          var _iterator, _step, rule, validationResult;

          return runtime_1.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _iterator = _createForOfIteratorHelperLoose(_this.rules);

                case 1:
                  if ((_step = _iterator()).done) {
                    _context.next = 15;
                    break;
                  }

                  rule = _step.value;

                  if (!rule.isAsync) {
                    _context.next = 9;
                    break;
                  }

                  _context.next = 6;
                  return rule.rule.validateAsync(value, model);

                case 6:
                  _context.t0 = _context.sent;
                  _context.next = 10;
                  break;

                case 9:
                  _context.t0 = rule.rule.validate(value, model);

                case 10:
                  validationResult = _context.t0;

                  if (!hasError(validationResult)) {
                    _context.next = 13;
                    break;
                  }

                  return _context.abrupt("return", validationResult);

                case 13:
                  _context.next = 1;
                  break;

                case 15:
                  return _context.abrupt("return", null);

                case 16:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }();
    };

    _this.mustAsync = function (definition) {
      var asyncMustRule = new MustAsyncRule(definition);

      _this.pushAsyncRule(asyncMustRule);

      return _this.getAllRulesAndExtensions();
    };

    _this.setAsyncValidator = function (validatorProducer) {
      var asyncValidatorRule = new AsyncValidatorRule(validatorProducer);

      _this.pushAsyncRule(asyncValidatorRule);

      return _this.getAllRulesAndExtensions();
    };

    _this.getAllRules = function () {
      return _extends({}, _this._getAllRules(), {
        mustAsync: _this.mustAsync,
        setAsyncValidator: _this.setAsyncValidator
      });
    };

    return _this;
  }

  return AsyncValueValidatorBuilder;
}(CoreValueValidatorBuilder);

var AsyncArrayValueValidatorBuilder = function AsyncArrayValueValidatorBuilder(rebuildValidateAsync, propertyName) {
  var _this = this;

  this.build = function () {
    return /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(value, model) {
        var asyncValueValidator, errors, _iterator, _step, element, errorOrNull, valueValidationResult;

        return runtime_1.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(model[_this.propertyName] == null)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", null);

              case 2:
                asyncValueValidator = _this.eachAsyncValueValidatorBuilder.build();
                errors = [];
                _iterator = _createForOfIteratorHelperLoose(value);

              case 5:
                if ((_step = _iterator()).done) {
                  _context.next = 14;
                  break;
                }

                element = _step.value;
                _context.next = 9;
                return asyncValueValidator(element, model);

              case 9:
                errorOrNull = _context.sent;
                valueValidationResult = hasError(errorOrNull) ? errorOrNull : null;
                errors.push(valueValidationResult);

              case 12:
                _context.next = 5;
                break;

              case 14:
                return _context.abrupt("return", hasError(errors) ? errors : null);

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();
  };

  this.getAllRules = function () {
    return _this.eachAsyncValueValidatorBuilder.getAllRules();
  };

  this.eachAsyncValueValidatorBuilder = new AsyncValueValidatorBuilder(rebuildValidateAsync);
  this.propertyName = propertyName;
};

var ValueValidatorBuilder = /*#__PURE__*/function (_CoreValueValidatorBu) {
  _inheritsLoose(ValueValidatorBuilder, _CoreValueValidatorBu);

  function ValueValidatorBuilder(rebuildValidate) {
    var _this;

    _this = _CoreValueValidatorBu.call(this, rebuildValidate) || this;

    _this.build = function () {
      return function (value, model) {
        for (var _iterator = _createForOfIteratorHelperLoose(_this.rules), _step; !(_step = _iterator()).done;) {
          var rule = _step.value;
          var validationResult = rule.rule.validate(value, model);

          if (hasError(validationResult)) {
            return validationResult;
          }
        }

        return null;
      };
    };

    _this.getAllRules = function () {
      return _extends({}, _this._getAllRules());
    };

    return _this;
  }

  return ValueValidatorBuilder;
}(CoreValueValidatorBuilder);

var ArrayValueValidatorBuilder = function ArrayValueValidatorBuilder(rebuildValidate, propertyName) {
  var _this = this;

  this.build = function () {
    return function (value, model) {
      if (model[_this.propertyName] == null) {
        return null;
      }

      var valueValidator = _this.eachValueValidatorBuilder.build();

      var errors = value.map(function (element) {
        var errorOrNull = valueValidator(element, model);
        return hasError(errorOrNull) ? errorOrNull : null;
      });
      return hasError(errors) ? errors : null;
    };
  };

  this.getAllRules = function () {
    return _this.eachValueValidatorBuilder.getAllRules();
  };

  this.eachValueValidatorBuilder = new ValueValidatorBuilder(rebuildValidate);
  this.propertyName = propertyName;
};

var CoreValidator = function CoreValidator(isAsync) {
  var _this = this;

  this.valueValidatorBuildersByPropertyName = {};
  this.asyncValueValidatorBuildersByPropertyName = {};

  this._validate = function () {
    return {};
  };

  this._validateAsync = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", Promise.resolve({}));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  this.rebuildValidate = function () {
    _this._validate = function (value) {
      var errors = {};

      for (var _i = 0, _Object$keys = Object.keys(_this.valueValidatorBuildersByPropertyName); _i < _Object$keys.length; _i++) {
        var propertyName = _Object$keys[_i];
        var valueValidatorBuilders = _this.valueValidatorBuildersByPropertyName[propertyName];

        for (var _iterator = _createForOfIteratorHelperLoose(valueValidatorBuilders), _step; !(_step = _iterator()).done;) {
          var valueValidatorBuilder = _step.value;
          var valueValidator = valueValidatorBuilder.build();
          var result = valueValidator(value[propertyName], value);

          if (hasError(result)) {
            errors[propertyName] = result;
          }
        }
      }

      return errors;
    };
  };

  this.rebuildValidateAsync = function () {
    _this._validateAsync = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(value) {
        var errors, _i2, _Object$keys2, propertyName, asyncValueValidatorBuilders, _iterator2, _step2, asyncValueValidatorBuilder, asyncValueValidator, result;

        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                errors = {};
                _i2 = 0, _Object$keys2 = Object.keys(_this.asyncValueValidatorBuildersByPropertyName);

              case 2:
                if (!(_i2 < _Object$keys2.length)) {
                  _context2.next = 18;
                  break;
                }

                propertyName = _Object$keys2[_i2];
                asyncValueValidatorBuilders = _this.asyncValueValidatorBuildersByPropertyName[propertyName];
                _iterator2 = _createForOfIteratorHelperLoose(asyncValueValidatorBuilders);

              case 6:
                if ((_step2 = _iterator2()).done) {
                  _context2.next = 15;
                  break;
                }

                asyncValueValidatorBuilder = _step2.value;
                asyncValueValidator = asyncValueValidatorBuilder.build();
                _context2.next = 11;
                return asyncValueValidator(value[propertyName], value);

              case 11:
                result = _context2.sent;

                if (hasError(result)) {
                  errors[propertyName] = result;
                }

              case 13:
                _context2.next = 6;
                break;

              case 15:
                _i2++;
                _context2.next = 2;
                break;

              case 18:
                return _context2.abrupt("return", errors);

              case 19:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }();
  };

  this.ruleFor = function (propertyName) {
    if (_this._isAsync) {
      var asyncValueValidatorBuilder = new AsyncValueValidatorBuilder(_this.rebuildValidateAsync);
      _this.asyncValueValidatorBuildersByPropertyName[propertyName] = _this.asyncValueValidatorBuildersByPropertyName[propertyName] || [];

      _this.asyncValueValidatorBuildersByPropertyName[propertyName].push(asyncValueValidatorBuilder);

      return asyncValueValidatorBuilder.getAllRules(); // Appease the type system
    } else {
      var valueValidatorBuilder = new ValueValidatorBuilder(_this.rebuildValidate);
      _this.valueValidatorBuildersByPropertyName[propertyName] = _this.valueValidatorBuildersByPropertyName[propertyName] || [];

      _this.valueValidatorBuildersByPropertyName[propertyName].push(valueValidatorBuilder);

      return valueValidatorBuilder.getAllRules(); // Appease the type system
    }
  };

  this.ruleForEach = function (propertyName) {
    if (_this._isAsync) {
      var asyncArrayValueValidatorBuilder = new AsyncArrayValueValidatorBuilder(_this.rebuildValidateAsync, propertyName);

      if (_this.asyncValueValidatorBuildersByPropertyName[propertyName] == null) {
        _this.asyncValueValidatorBuildersByPropertyName[propertyName] = [];
      }

      _this.asyncValueValidatorBuildersByPropertyName[propertyName].push(asyncArrayValueValidatorBuilder);

      return asyncArrayValueValidatorBuilder.getAllRules();
    } else {
      var arrayValueValidatorBuilder = new ArrayValueValidatorBuilder(_this.rebuildValidate, propertyName);

      if (_this.valueValidatorBuildersByPropertyName[propertyName] == null) {
        _this.valueValidatorBuildersByPropertyName[propertyName] = [];
      }

      _this.valueValidatorBuildersByPropertyName[propertyName].push(arrayValueValidatorBuilder);

      return arrayValueValidatorBuilder.getAllRules();
    }
  };

  this._isAsync = isAsync;
};
var SyncValidator = /*#__PURE__*/function (_CoreValidator) {
  _inheritsLoose(SyncValidator, _CoreValidator);

  function SyncValidator() {
    var _this2;

    _this2 = _CoreValidator.call(this, false) || this;

    _this2.validate = function (value) {
      return _this2._validate(value);
    };

    return _this2;
  }

  return SyncValidator;
}(CoreValidator);
var AsyncValidator = /*#__PURE__*/function (_CoreValidator2) {
  _inheritsLoose(AsyncValidator, _CoreValidator2);

  function AsyncValidator() {
    var _this3;

    _this3 = _CoreValidator2.call(this, true) || this;

    _this3.validateAsync = function (value) {
      return _this3._validateAsync(value);
    };

    return _this3;
  }

  return AsyncValidator;
}(CoreValidator);

exports.AsyncValidator = AsyncValidator;
exports.Validator = SyncValidator;
//# sourceMappingURL=fluentvalidation-ts.cjs.development.js.map
