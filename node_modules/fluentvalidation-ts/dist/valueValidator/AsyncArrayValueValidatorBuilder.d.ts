import { AsyncValueValidator } from 'valueValidator/AsyncValueValidator';
export declare class AsyncArrayValueValidatorBuilder<TModel, TPropertyName extends keyof TModel, TValue extends Array<TEachValue> & TModel[TPropertyName], TEachValue> {
    private eachAsyncValueValidatorBuilder;
    private propertyName;
    constructor(rebuildValidateAsync: () => void, propertyName: string);
    build: () => AsyncValueValidator<TModel, TValue>;
    getAllRules: () => {
        mustAsync: (definition: {
            predicate: (value: TValue[0] & TEachValue, model: TModel) => Promise<boolean>;
            message: string | ((value: TValue[0] & TEachValue, model: TModel) => string);
        } | ({
            predicate: (value: TValue[0] & TEachValue, model: TModel) => Promise<boolean>;
            message: string | ((value: TValue[0] & TEachValue, model: TModel) => string);
        } | ((value: TValue[0] & TEachValue, model: TModel) => Promise<boolean>))[] | ((value: TValue[0] & TEachValue, model: TModel) => Promise<boolean>)) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        setAsyncValidator: (validatorProducer: (model: TModel) => import("../IAsyncValidator").IAsyncValidator<TValue[0] & TEachValue>) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        notEqual: (forbiddenValue: TValue[0] & TEachValue) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        equal: (requiredValue: TValue[0] & TEachValue) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        must: (definition: {
            predicate: (value: TValue[0] & TEachValue, model: TModel) => boolean;
            message: string | ((value: TValue[0] & TEachValue, model: TModel) => string);
        } | ({
            predicate: (value: TValue[0] & TEachValue, model: TModel) => boolean;
            message: string | ((value: TValue[0] & TEachValue, model: TModel) => string);
        } | ((value: TValue[0] & TEachValue, model: TModel) => boolean))[] | ((value: TValue[0] & TEachValue, model: TModel) => boolean)) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        notNull: () => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        null: () => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        notEmpty: () => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        length: (minLength: number, maxLength: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        maxLength: (maxLength: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        minLength: (minLength: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        matches: (pattern: RegExp) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        emailAddress: () => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        lessThan: (threshold: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        lessThanOrEqualTo: (threshold: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        greaterThan: (threshold: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        greaterThanOrEqualTo: (threshold: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        exclusiveBetween: (lowerBound: number, upperBound: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        inclusiveBetween: (lowerBound: number, upperBound: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        setValidator: (validatorProducer: (model: TModel) => import("../IValidator").IValidator<TValue[0] & TEachValue>) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
        scalePrecision: (precision: number, scale: number) => {
            withMessage: (message: string) => {
                when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
                unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            };
            when: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
            unless: (condition: (model: TModel) => boolean, appliesTo?: "AppliesToAllValidators" | "AppliesToCurrentValidator") => object;
        };
    };
}
