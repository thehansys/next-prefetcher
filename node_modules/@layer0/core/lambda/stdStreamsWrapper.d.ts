export declare function logDownstreamRequestInfo(data: any): void;
export declare function logDownstreamResponseInfo(data: any): void;
export declare function logUpstreamRequestInfo(data: any): void;
export declare function logUpstreamResponseInfo(data: any): void;
export declare function logUpstreamResponseBodyInfo(data: any): void;
declare const stdStreamsWrapper: {
    /**
     * Wraps console.xxx methods AND standard streams into a JSON payload that will
     * be sent back to the final user in the log streaming interface.
     *
     * Notes:
     * - We have to wrap standard streams because some logging libraries (like 'consola')
     *   writes to those directly without going through console.xxx
     * - We have to wrap console.xxx methods too, as they don't seem to be bound to
     *   standard streams in AWS Lambda Environment. That wrapper (using pino) streams
     *   to process.stdout, leading to the point below.
     * - Both notes above would result in a double json encapsulation when logging via
     *   console.xxx methods. We prevent that in our standard stream wrapper by detecting
     *   a json string that coming from pino logger.
     */
    enable: ({ clientIp, requestId }?: {
        clientIp?: string | undefined;
        requestId?: string | undefined;
    }) => void;
    disable: () => void;
};
export default stdStreamsWrapper;
