declare type JsType = 'boolean' | 'number' | 'string' | 'object' | 'symbol' | 'function';
export declare const ofType: (value: any, type: JsType) => boolean;
export declare const ofTypeWhenNotNull: (value: any, type: JsType) => boolean;
export declare const beBoolean: {
    predicate: (value: any) => boolean;
    message: string;
};
export declare const beBooleanWhenNotNull: {
    predicate: (value: any) => boolean;
    message: string;
};
export declare const beString: {
    predicate: (value: any) => boolean;
    message: string;
};
export declare const beStringWhenNotNull: {
    predicate: (value: any) => boolean;
    message: string;
};
export declare const beNumber: {
    predicate: (value: any) => boolean;
    message: string;
};
export declare const beNumberWhenNotNull: {
    predicate: (value: any) => boolean;
    message: string;
};
export declare const beFunction: {
    predicate: (value: any) => boolean;
    message: string;
};
export declare const beFunctionWhenNotNull: {
    predicate: (value: any) => boolean;
    message: string;
};
export declare const beObject: {
    predicate: (value: any) => boolean;
    message: string;
};
export declare const beObjectWhenNotNull: {
    predicate: (value: any) => boolean;
    message: string;
};
export declare const beArrayWhenNotNull: {
    predicate: (value: any) => boolean;
    message: string;
};
export declare const notBeProhibitedHeaderName: {
    predicate: (name: string) => boolean;
    message: string;
};
export declare const notBeProhibitedCookieName: {
    predicate: (name: string) => boolean;
    message: string;
};
export declare const beValidHeaderName: {
    predicate: (name: string) => boolean;
    message: string;
};
export declare const beValidHeaderValue: {
    predicate: (name: string) => boolean;
    message: string;
};
export declare const notNull: (value: any) => boolean;
export {};
