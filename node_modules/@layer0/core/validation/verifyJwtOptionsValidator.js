"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const baseValidator_1 = require("./baseValidator");
const conditions_1 = require("./conditions");
const validateHelpers_1 = require("./validateHelpers");
class VerifyJwtOptionsValidator extends baseValidator_1.BaseValidator {
    constructor() {
        super();
        this.ruleFor('algo')
            .must(p => validateHelpers_1.isJwtAlgo(p))
            .withMessage(`must be one of the following values: ${validateHelpers_1.JWT_ALGO_NAMES.join(', ')}`);
        this.ruleFor('secret').must(conditions_1.beString);
        this.ruleFor('header')
            .must(conditions_1.beStringWhenNotNull)
            // cheat compiler, as validation library is trying to be too smart
            // so we need this small workaround, as header could be also undefined
            .must(conditions_1.beValidHeaderName)
            .when(p => conditions_1.notNull(p.header));
        this.ruleFor('cookie').must(conditions_1.beStringWhenNotNull);
        this.ruleFor('redirectExpiredAbsent').must(conditions_1.beStringWhenNotNull);
        this.ruleFor('redirectInvalid').must(conditions_1.beStringWhenNotNull);
        this.ruleFor('returnUrlParamName').must(conditions_1.beStringWhenNotNull);
    }
}
exports.VerifyJwtOptionsValidator = VerifyJwtOptionsValidator;
