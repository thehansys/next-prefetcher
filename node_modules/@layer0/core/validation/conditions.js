"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const validateHelpers_1 = require("./validateHelpers");
exports.ofType = (value, type) => typeof value === type;
exports.ofTypeWhenNotNull = (value, type) => exports.notNull(value) ? exports.ofType(value, type) : true;
exports.beBoolean = {
    predicate: (value) => exports.ofType(value, 'boolean'),
    message: 'must be a boolean',
};
exports.beBooleanWhenNotNull = {
    predicate: (value) => exports.ofTypeWhenNotNull(value, 'boolean'),
    message: 'must be a boolean',
};
exports.beString = {
    predicate: (value) => exports.ofType(value, 'string'),
    message: 'must be a string',
};
exports.beStringWhenNotNull = {
    predicate: (value) => exports.ofTypeWhenNotNull(value, 'string'),
    message: 'must be a string',
};
exports.beNumber = {
    predicate: (value) => exports.ofType(value, 'number'),
    message: 'must be a number',
};
exports.beNumberWhenNotNull = {
    predicate: (value) => exports.ofTypeWhenNotNull(value, 'number'),
    message: 'must be a number',
};
exports.beFunction = {
    predicate: (value) => exports.ofType(value, 'function'),
    message: 'must be a function',
};
exports.beFunctionWhenNotNull = {
    predicate: (value) => exports.ofTypeWhenNotNull(value, 'function'),
    message: 'must be a function',
};
exports.beObject = {
    predicate: (value) => exports.ofType(value, 'object'),
    message: 'must be an object',
};
exports.beObjectWhenNotNull = {
    predicate: (value) => exports.ofTypeWhenNotNull(value, 'object'),
    message: 'must be an object',
};
exports.beArrayWhenNotNull = {
    predicate: (value) => exports.notNull(value) ? Array.isArray(value) : true,
    message: 'must be an array',
};
exports.notBeProhibitedHeaderName = {
    predicate: (name) => !validateHelpers_1.isProhibitedHeaderName(name),
    message: 'reserved header names cannot be specified',
};
exports.notBeProhibitedCookieName = {
    predicate: (name) => !validateHelpers_1.isProhibitedCookieName(name),
    message: 'reserved cookie names cannot be specified',
};
exports.beValidHeaderName = {
    predicate: (name) => validateHelpers_1.isValidHeaderName(name),
    message: 'must comply to RFC standard specification for header names (allowed characters: /^[a-zA-Z_-]*$/)',
};
exports.beValidHeaderValue = {
    predicate: (name) => validateHelpers_1.isValidHeaderValue(name),
    message: `must comply to RFC standard specification for header values (allowed characters: /^[a-zA-Z:;.,\\/"'?!(){}[]@<>=\\-+*#$&\`|~^%]*$/`,
};
exports.notNull = (value) => value !== undefined && value !== null;
