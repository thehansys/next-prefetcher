"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cacheOptionsValidator_1 = require("./cacheOptionsValidator");
const proxyHostParamsValidator_1 = require("./proxyHostParamsValidator");
const proxyParamsValidator_1 = require("./proxyParamsValidator");
const redirectParamsValidator_1 = require("./redirectParamsValidator");
const renderParamsValidator_1 = require("./renderParamsValidator");
const rewriteParamsValidator_1 = require("./rewriteParamsValidator");
const serveStaticParamsValaditor_1 = require("./serveStaticParamsValaditor");
const headerSetParamsValidator_1 = require("./headerSetParamsValidator");
const streamParamsValidator_1 = require("./streamParamsValidator");
const updatePathValidator_1 = require("./updatePathValidator");
const headerUpdateParamsValidator_1 = require("./headerUpdateParamsValidator");
const headerRemoveParamsValidator_1 = require("./headerRemoveParamsValidator");
const cookieAddParmasValidator_1 = require("./cookieAddParmasValidator");
const cookieRemoveParamsValidator_1 = require("./cookieRemoveParamsValidator");
const cookieUpdateParamsValidator_1 = require("./cookieUpdateParamsValidator");
const serviceWorkerParamsValidator_1 = require("./serviceWorkerParamsValidator");
const appShellParamsValidator_1 = require("./appShellParamsValidator");
const corsOptionsValidator_1 = require("./corsOptionsValidator");
const sendParamsValidator_1 = require("./sendParamsValidator");
const computeParamsValidator_1 = require("./computeParamsValidator");
const verifyJwtOptionsValidator_1 = require("./verifyJwtOptionsValidator");
const renderWithAppParamsValidator_1 = require("./renderWithAppParamsValidator");
exports.validateRender = (params) => {
    const validator = new renderParamsValidator_1.RenderParamsValidator();
    validator.validateWithThrow(params, 'render');
};
exports.validateCache = (params) => {
    const validator = new cacheOptionsValidator_1.CacheOptionsValidator();
    validator.validateWithThrow(params, 'cache');
};
exports.validateProxyHost = (params) => {
    const validator = new proxyHostParamsValidator_1.ProxyHostParamsValidator();
    // cheat here, as proxy host is not in BaseResponse
    // todo: refactor this
    validator.validateWithThrow(params, 'proxyHost');
};
exports.validateRewrite = (params) => {
    const validator = new rewriteParamsValidator_1.RewriteParamsValidator();
    validator.validateWithThrow(params, 'rewrite');
};
exports.validateServeStatic = (params) => {
    const validator = new serveStaticParamsValaditor_1.ServeStaticParamsValidator();
    validator.validateWithThrow(params, 'serveStatic');
};
exports.validateHeaderSet = (params, methodName) => {
    const validator = new headerSetParamsValidator_1.HeaderSetParamsValidator();
    validator.validateWithThrow(params, methodName);
};
exports.validateHeaderUpdate = (params, methodName) => {
    const validator = new headerUpdateParamsValidator_1.HeaderUpdateParamsValidator();
    validator.validateWithThrow(params, methodName);
};
exports.validateHeaderRemove = (params, methodName) => {
    const validator = new headerRemoveParamsValidator_1.HeaderRemoveParamsValidator();
    validator.validateWithThrow(params, methodName);
};
exports.validateRenderWithApp = (params) => {
    const validator = new renderWithAppParamsValidator_1.RenderWithAppParamsValidator();
    validator.validateWithThrow(params, 'renderWithApp');
};
exports.validateCookieAdd = (params, methodName) => {
    const validator = new cookieAddParmasValidator_1.CookieAddParamsValidator();
    validator.validateWithThrow(params, methodName);
};
exports.validateCookieUpdate = (params, methodName) => {
    const validator = new cookieUpdateParamsValidator_1.CookieUpdateParamsValidator();
    validator.validateWithThrow(params, methodName);
};
exports.validateCookieRemove = (params, methodName) => {
    const validator = new cookieRemoveParamsValidator_1.CookieRemoveParamsValidator();
    validator.validateWithThrow(params, methodName);
};
exports.validateVerifyJwt = (params) => {
    const validator = new verifyJwtOptionsValidator_1.VerifyJwtOptionsValidator();
    validator.validateWithThrow(params, 'verifyJwt');
};
exports.validateUpdatePath = (params) => {
    const validator = new updatePathValidator_1.UpdatePathParamsValidator();
    validator.validateWithThrow(params, 'updatePath');
};
exports.validateStream = (params) => {
    const validator = new streamParamsValidator_1.StreamParamsValidator();
    validator.validateWithThrow(params, 'stream');
};
exports.validateRedirect = (params) => {
    const validator = new redirectParamsValidator_1.RedirectParamsValidator();
    validator.validateWithThrow(params, 'redirect');
};
exports.validateServiceWorker = (params) => {
    const validator = new serviceWorkerParamsValidator_1.ServiceWorkerParamsValidator();
    validator.validateWithThrow(params, 'serviceWorker');
};
exports.validateAppShell = (params) => {
    const validator = new appShellParamsValidator_1.AppShellParmsValidator();
    validator.validateWithThrow(params, 'appShell');
};
exports.validateAllowCors = (params) => {
    const validator = new corsOptionsValidator_1.CorsOptionsValidator();
    validator.validateWithThrow(params, 'allowCors');
};
exports.validateSend = (params) => {
    const validator = new sendParamsValidator_1.SendParamsValidator();
    validator.validateWithThrow(params, 'send');
};
exports.validateCompute = (params) => {
    const validator = new computeParamsValidator_1.ComputeParamsValidator();
    validator.validateWithThrow(params, 'compute');
};
exports.validateProxy = (params) => {
    const validator = new proxyParamsValidator_1.ProxyParamsValidator();
    validator.validateWithThrow(params, 'proxy');
};
