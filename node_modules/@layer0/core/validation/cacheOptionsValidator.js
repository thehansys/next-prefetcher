"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const CustomCacheKey_1 = __importDefault(require("../router/CustomCacheKey"));
const baseValidator_1 = require("./baseValidator");
const conditions_1 = require("./conditions");
class EdgeCacheOptionsValidator extends baseValidator_1.BaseValidator {
    constructor() {
        super();
        this.ruleFor('forcePrivateCaching').must(conditions_1.beBooleanWhenNotNull);
        this.ruleFor('maxAgeSeconds').must(conditions_1.beNumberWhenNotNull);
        this.ruleFor('staleWhileRevalidateSeconds').must(conditions_1.beNumberWhenNotNull);
    }
}
class BrowserCacheOptionsValidator extends baseValidator_1.BaseValidator {
    constructor() {
        super();
        this.ruleFor('convertToGet').must(conditions_1.beBooleanWhenNotNull);
        this.ruleFor('spa').must(conditions_1.beBooleanWhenNotNull);
        this.ruleFor('maxAgeSeconds').must(conditions_1.beNumberWhenNotNull);
        this.ruleFor('serviceWorkerSeconds').must(conditions_1.beNumberWhenNotNull);
    }
}
class CacheOptionsValidator extends baseValidator_1.BaseValidator {
    constructor() {
        super();
        this.ruleFor('edge')
            .must(p => p === false || typeof p === 'object')
            .withMessage('when defined must be false or EdgeCacheOptions')
            // @ts-ignore
            .setValidator(() => new EdgeCacheOptionsValidator())
            // @ts-ignore
            .when(p => conditions_1.notNull(p.edge));
        this.ruleFor('browser')
            .must(p => p === false || typeof p === 'object')
            .withMessage('when defined must be false or BrowserCacheOptions')
            // @ts-ignore
            .setValidator(() => new BrowserCacheOptionsValidator())
            // @ts-ignore
            .when(p => conditions_1.notNull(p.browser));
        this.ruleFor('prefetchUpstreamRequests').must(conditions_1.beBooleanWhenNotNull);
        this.ruleFor('key')
            .must(p => p instanceof CustomCacheKey_1.default)
            .when(p => conditions_1.notNull(p.key));
    }
}
exports.CacheOptionsValidator = CacheOptionsValidator;
