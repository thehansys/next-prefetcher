"use strict";
/* istanbul ignore file */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globby_1 = __importDefault(require("globby"));
const deploy_1 = require("@layer0/core/deploy");
const path_1 = require("path");
const FrameworkBuildError_1 = __importDefault(require("@layer0/core/errors/FrameworkBuildError"));
const nonWebpackRequire_1 = __importDefault(require("@layer0/core/utils/nonWebpackRequire"));
const validateNextConfig_1 = __importDefault(require("./validateNextConfig"));
const fs_1 = require("fs");
const setSsgStaticAssetExpiration_1 = __importDefault(require("./setSsgStaticAssetExpiration"));
const nft_1 = require("@vercel/nft");
const getServerBuildAvailability_1 = require("../util/getServerBuildAvailability");
/**
 * Creates a build entrypoint for a connector
 * @param param0
 */
function createBuildEntryPoint({ srcDir, distDir, buildCommand }) {
    const builder = new deploy_1.DeploymentBuilder(process.cwd());
    const srcDirAbsolute = path_1.join(process.cwd(), srcDir);
    const distDirAbsolute = path_1.join(process.cwd(), distDir);
    return async function build(options) {
        var _a;
        const { skipFramework } = options;
        let nextConfig = nonWebpackRequire_1.default(path_1.join(srcDirAbsolute, 'next.config.js'));
        if (typeof nextConfig === 'function') {
            nextConfig = nextConfig('phase-production-build', {});
        }
        const { useServerBuild } = getServerBuildAvailability_1.getServerBuildAvailability({
            config: nextConfig,
        });
        const buildOutputFolder = useServerBuild ? 'server' : 'serverless';
        builder.clearPreviousBuildOutput();
        if (!skipFramework) {
            // clear .next directory
            builder.emptyDirSync(distDirAbsolute);
            // ensure that next.config.js exists and has target: serverless
            validateNextConfig_1.default(srcDirAbsolute);
            try {
                // run the next.js build
                await builder.exec(buildCommand);
            }
            catch (e) {
                throw new FrameworkBuildError_1.default('Next.js', buildCommand, e);
            }
        }
        const lambdaAssetCopyOptions = {};
        builder
            // React components and api endpoints
            .addJSAsset(path_1.join(distDirAbsolute, buildOutputFolder), undefined, lambdaAssetCopyOptions)
            // needed for rewrites and redirects
            .addJSAsset(path_1.join(distDirAbsolute, 'routes-manifest.json'))
            // needed for cache times
            .addJSAsset(path_1.join(distDirAbsolute, 'prerender-manifest.json'));
        // We use server build for Next 12+. The server needs to be provided the server configuration at run time.
        if (useServerBuild) {
            // next uses this internally to derive the config from the file
            const loadConfig = nonWebpackRequire_1.default('next/dist/server/config').default;
            const serverConfig = await loadConfig('phase-production-server', process.cwd());
            builder.writeFileSync(path_1.join(builder.jsDir, 'next.config.js'), `module.exports=${JSON.stringify(serverConfig)}`);
        }
        else {
            // write a minimal next.config.js to the lambda so that we can find the path to static assets in the cloud
            builder.writeFileSync(path_1.join(builder.jsDir, 'next.config.js'), `module.exports=${JSON.stringify({ distDir })}`);
        }
        const prerenderManifest = (nonWebpackRequire_1.default(path_1.join(distDirAbsolute, 'prerender-manifest.json')));
        const defaultLocale = (_a = nextConfig.i18n) === null || _a === void 0 ? void 0 : _a.defaultLocale;
        setSsgStaticAssetExpiration_1.default(builder, prerenderManifest, `${distDir}/${buildOutputFolder}`, defaultLocale);
        // Copy over assets from the standalone build output
        if (useServerBuild) {
            // Main necessary files for next server to run
            builder.copySync(path_1.join(distDirAbsolute, 'standalone', '.next'), path_1.join(builder.jsDir, '.next'));
            builder.copySync(path_1.join(distDirAbsolute, 'standalone', 'node_modules'), path_1.join(builder.jsDir, 'node_modules'));
            builder.copySync(path_1.join(distDirAbsolute, 'standalone', 'package.json'), path_1.join(builder.jsDir, 'package.json'));
        }
        await builder.build();
        const pages = path_1.join(builder.jsDir, distDir, buildOutputFolder, 'pages');
        // If the user has overrided the default target and is using serverless
        // do not perform tracing for required node modules
        if (!useServerBuild && nextConfig.target !== 'serverless') {
            const pageHandlerFiles = globby_1.default
                .sync('**/*.js', {
                onlyFiles: true,
                cwd: pages,
            })
                .map(file => {
                const src = path_1.join(pages, file);
                return src;
            });
            const { fileList } = await nft_1.nodeFileTrace(pageHandlerFiles);
            fileList
                .filter(file => file.indexOf('node_modules') === 0)
                .forEach(file => builder.copySync(file, path_1.join(builder.layer0Dir, 'lambda', file)));
        }
        // Remove all static pages from the lambda dir.  We don't need them in the lambda
        // since we're serving them from s3. so that @layer0/core doesn't.  Also, having them be present
        // in the lambda will make NextRoutes add duplicate routes for each.
        globby_1.default
            .sync('**/*.{json,html}', {
            onlyFiles: true,
            cwd: pages,
        })
            .forEach(file => {
            const src = path_1.join(pages, file);
            builder.addStaticAsset(src, path_1.join(distDir, buildOutputFolder, 'pages', file));
            builder.removeSync(src);
        });
        const staticPagesDir = path_1.join(builder.staticAssetsDir, distDir, buildOutputFolder, 'pages');
        if (defaultLocale) {
            builder.copySync(path_1.join(staticPagesDir, defaultLocale), staticPagesDir);
            // example: copy "en-US.html" to "index.html"
            const indexHtml = path_1.join(staticPagesDir, `${defaultLocale}.html`);
            if (fs_1.existsSync(indexHtml)) {
                builder.copySync(indexHtml, path_1.join(staticPagesDir, 'index.html'));
            }
            // example: copy "en-US.json" to "index.json"
            const indexJson = path_1.join(staticPagesDir, `${defaultLocale}.json`);
            if (fs_1.existsSync(indexJson)) {
                builder.copySync(indexJson, path_1.join(staticPagesDir, 'index.json'));
            }
        }
    };
}
exports.default = createBuildEntryPoint;
